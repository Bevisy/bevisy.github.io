<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Bevisy's Blogs</title><link>https://bevisy.github.io/post/</link><description>Recent content in Posts on Bevisy's Blogs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 21 Jun 2022 23:14:52 +0800</lastBuildDate><atom:link href="https://bevisy.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Kata Containers 安全容器GPU支持实践</title><link>https://bevisy.github.io/p/kata-containers-%E5%AE%89%E5%85%A8%E5%AE%B9%E5%99%A8gpu%E6%94%AF%E6%8C%81%E5%AE%9E%E8%B7%B5/</link><pubDate>Tue, 21 Jun 2022 23:14:52 +0800</pubDate><guid>https://bevisy.github.io/p/kata-containers-%E5%AE%89%E5%85%A8%E5%AE%B9%E5%99%A8gpu%E6%94%AF%E6%8C%81%E5%AE%9E%E8%B7%B5/</guid><description>kata-containers 安全容器 GPU 支持实践 本文着重讲述如何在 kata-containers 安全容器中支持 GPU 设备，对安全容器本身的介绍会比较少，如果感兴趣的话，可以参考 kata-containers 官网。接下来，就是讲述如何一步步在安全容器中支持 GPU 设备，以Tesla P100 PCIe 16GB为例。
准备阶段 下载官方 release 包 下载官方代码，编译需要使用到的组件containerd-shim-kata-v2，kata-agent，虚拟机镜像 kata-containers.img或者kata-containers-initrd.img,虚拟机内核 vmlinuz GPU 支持实践 准备 release 包 可以从官方的 release 页面获取最新的包，此处使用当前最新版本2.4.2。
# 下载 wget https://github.com/kata-containers/kata-containers/releases/download/2.4.2/kata-static-2.4.2-x86_64.tar.xz # 解压并置于 /opt 目录下 tar xf kata-static-2.4.2-x86_64.tar.xz mv opt/kata /opt/ 编译必要组件 拉取 kata-containers 源码 注意：源码需要包含此PR
mkdir -p $GOPATH/src/github.com/kata-containers cd $GOPATH/src/github.com/kata-containers git clone https://github.com/kata-containers/kata-containers.git git clone https://github.com/kata-containers/tests.git # 如果当前用户不是 root 用户，则需要将 tests 仓库切换到 root 用户，否则后续编译镜像需要安装 libseccomp 会失败 sudo chown -R root:root tests 编译containerd-shim-kata-v2 # 编译 containerd-shim-v2 make -C $GOPATH/src/github.</description></item><item><title>Close Swap on Ubuntu20.04</title><link>https://bevisy.github.io/p/close-swap-on-ubuntu20.04/</link><pubDate>Tue, 25 May 2021 13:55:24 +0800</pubDate><guid>https://bevisy.github.io/p/close-swap-on-ubuntu20.04/</guid><description>临时关闭 sudo dphys-swapfile swapoff 永久关闭 sudo systemctl disable dphys-swapfile.service --now # 注释fstab #/dev/mapper/vgubuntu-swap_1 none swap sw 0 0</description></item><item><title>linux 利用loop设备模拟块设备</title><link>https://bevisy.github.io/p/linux-%E5%88%A9%E7%94%A8loop%E8%AE%BE%E5%A4%87%E6%A8%A1%E6%8B%9F%E5%9D%97%E8%AE%BE%E5%A4%87/</link><pubDate>Fri, 02 Apr 2021 16:37:51 +0800</pubDate><guid>https://bevisy.github.io/p/linux-%E5%88%A9%E7%94%A8loop%E8%AE%BE%E5%A4%87%E6%A8%A1%E6%8B%9F%E5%9D%97%E8%AE%BE%E5%A4%87/</guid><description>linux 利用loop设备模拟块设备 创建虚拟设备 losetup --help -a 显示所有已经使用的回环设备状态 -d 卸除回环设备 -f 寻找第一个未使用的回环设备 -e &amp;lt;加密选项&amp;gt; 启动加密编码 # 查找第一个未使用的回环设备 losetup -f # 创建文件 dd if=/dev/zero of=./disk.img bs=4M count=1024 # 将disk.img 虚拟成一个回环设备 losetup -f disk.img # 查询此设备 losetup -a | grep disk.img /dev/loop25: [64768]:3296700 (/home/zbb/temp/disk/disk.img) # 格式化设备 mkfs.ext4 /dev/loop25 # 挂载块设备 mount /dev/loop25 test # test 为自定义目录 # 卸载设备 umount test losetup -d /dev/loop25</description></item><item><title>Install Kubernetes1.20.1 and Containerd1.4.3 on Ubuntu with ZFS</title><link>https://bevisy.github.io/p/install-kubernetes1.20.1-and-containerd1.4.3-on-ubuntu-with-zfs/</link><pubDate>Mon, 11 Jan 2021 13:56:02 +0800</pubDate><guid>https://bevisy.github.io/p/install-kubernetes1.20.1-and-containerd1.4.3-on-ubuntu-with-zfs/</guid><description>基于ZFS的Ubuntu20.04安装kubernetes1.20 containerd 安装 containerd containerd.io 1.4.3 269548fa27e0089a8b8278fc4fc781d7f65a939b 安装 # 安装必要组件 $ sudo apt-get update $ sudo apt-get install \ apt-transport-https \ ca-certificates \ curl \ gnupg-agent \ software-properties-common # 安装gpg key curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - # 验证gpg key $ sudo apt-key fingerprint 0EBFCD88 # 添加 repo $ sudo add-apt-repository \ &amp;#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu \ $(lsb_release -cs)\ stable&amp;#34; # 安装containerd $ sudo apt-get update $ sudo apt-get install containerd.</description></item><item><title>Burn the Operating System Installation Disk on Mac</title><link>https://bevisy.github.io/p/burn-the-operating-system-installation-disk-on-mac/</link><pubDate>Wed, 06 Jan 2021 19:22:16 +0800</pubDate><guid>https://bevisy.github.io/p/burn-the-operating-system-installation-disk-on-mac/</guid><description>在Macbook上烧录iso镜像，制作操作系统盘 查看烧录U盘 diskutil list # 例如：/dev/disk3 取消挂载U盘 diskutil unmountDisk /dev/disk3 烧录 # 以 ubuntu-20.04.iso 为例 sudo dd if=~/Downloads/ubuntu-20.04.iso of=/dev/disk3 bs=1m &amp;amp;&amp;amp; sync # sync 作用: 使缓存落盘 弹出U盘 diskutil eject /dev/disk3</description></item><item><title>Install TigerVncServer On Ubuntu 20.04</title><link>https://bevisy.github.io/p/install-tigervncserver-on-ubuntu-20.04/</link><pubDate>Fri, 31 Jul 2020 11:47:14 +0800</pubDate><guid>https://bevisy.github.io/p/install-tigervncserver-on-ubuntu-20.04/</guid><description>Ubuntu 20.04 安装 Tigervncserver # 安装 $ sudo apt update $ sudo apt install xfce4 xfce4-goodies tigervnc-standalone-server # 推荐使用 xfce4 桌面 # 启动 $ vncpasswd # 配置 vnc 客户端连接密码 $ vncserver $ vncserver -kill :1 # 关闭创建的 vnc server # 修改配置，解决黑屏和灰屏问题 $ touch $HOME/.vnc/xstartup $ chmod u+x $HOME/.vnc/xstartup $ cat &amp;gt; $HOME/.vnc/xstartup &amp;lt;&amp;lt; EOF #!/bin/sh unset SESSION_MANAGER unset DBUS_SESSION_BUS_ADDRESS [ -r $HOME/.Xresources ] &amp;amp;&amp;amp; xrdb $HOME/.Xresources xsetroot -solid grey xterm -geometry 80x24+10+10 -ls -title &amp;#34;$VNCDESKTOP Desktop&amp;#34; &amp;amp; startxfce4 &amp;amp; EOF # 再次启动 $ vncserver :1 --geomotry 1366x768 # --geometry 参数随意 # 使用 vnc viewer 连接，端口号为 5091 使用 lxde 桌面 # 安装 $ sudo apt install xorg lxde-core lxterminal # 配置 vncserver 启动桌面 $ cat &amp;gt; $HOME/.</description></item><item><title>Install Wechat Client On Ubuntu 20.04</title><link>https://bevisy.github.io/p/install-wechat-client-on-ubuntu-20.04/</link><pubDate>Wed, 29 Jul 2020 11:16:31 +0800</pubDate><guid>https://bevisy.github.io/p/install-wechat-client-on-ubuntu-20.04/</guid><description>Ubuntu 20.04 安装微信客户端 clone repo deepin-wine-ubuntu
执行脚本 sudo chmod a+x install_2.8.22.sh &amp;amp;&amp;amp; ./install_2.8.22.sh
下载微信deb包，并安装 下载地址
安装微信： sudo dpkg –i deepin.com.wechat_2.6.8.65deepin0_i386.deb
安装字体：(参考issue：https://github.com/wszqkzqk/deepin-wine-ubuntu/issues/253) sudo apt install fonts-wqy-microhei fonts-wqy-zenhei</description></item><item><title>Ubuntu 20.04 显示器分辨率模式调整</title><link>https://bevisy.github.io/p/ubuntu-20.04-%E6%98%BE%E7%A4%BA%E5%99%A8%E5%88%86%E8%BE%A8%E7%8E%87%E6%A8%A1%E5%BC%8F%E8%B0%83%E6%95%B4/</link><pubDate>Mon, 27 Jul 2020 10:24:29 +0800</pubDate><guid>https://bevisy.github.io/p/ubuntu-20.04-%E6%98%BE%E7%A4%BA%E5%99%A8%E5%88%86%E8%BE%A8%E7%8E%87%E6%A8%A1%E5%BC%8F%E8%B0%83%E6%95%B4/</guid><description>Ubuntu 20.04 显示器分辨率模式调整 问题描述 Ubuntu 20.04 提示无法识别显示器，默认以分辨率1024x768(4:3)展示
问题解决 添加新的分辨率模式
查询输出接口 $ xrandr Screen 0: minimum 320 x 200, current 2624 x 900, maximum 16384 x 16384 eDP-1 connected primary 1600x900+0+0 (normal left inverted right x axis y axis) 309mm x 174mm 1600x900 60.01*+ 59.99 59.94 59.95 59.82 1440x900 59.89 ... 360x202 59.51 59.13 320x180 59.84 59.32 DP-1 disconnected (normal left inverted right x axis y axis) HDMI-1 disconnected (normal left inverted right x axis y axis) DP-2 connected 1024x768+1600+0 (normal left inverted right x axis y axis) 0mm x 0mm # 注意此行 1024x768 60.</description></item><item><title>Kata-containers Compile And Installed</title><link>https://bevisy.github.io/p/kata-containers-compile-and-installed/</link><pubDate>Sat, 25 Jul 2020 23:06:12 +0800</pubDate><guid>https://bevisy.github.io/p/kata-containers-compile-and-installed/</guid><description>[TOC]
kata-containers 编译安装 kata-runtime 编译安装 # download source code $ go get -d -u github.com/kata-containers/runtime $ cd ${GOPATH}/src/github.com/kata-containers/runtime # compile and install $ make $ make install # Install Dir /usr/libexec/kata-containers/kata-netmon /usr/local/bin/kata-runtime /usr/local/bin/containerd-shim-kata-v2 /usr/share/defaults/kata-containers/* kata-shim 编译安装 # download source code $ go get -d -u github.com/kata-containers/shim $ cd ${GOTAH}/src/github.com/kata-containers/shim # compile and install $ makn $ make install # Install Dir /usr/libexec/kata-containers/kata-shim kata-proxy 编译安装 # download source code $ go get -d -u github.</description></item><item><title>Compile qemu on Ubuntu 20.04</title><link>https://bevisy.github.io/p/compile-qemu-on-ubuntu-20.04/</link><pubDate>Fri, 24 Jul 2020 22:21:51 +0800</pubDate><guid>https://bevisy.github.io/p/compile-qemu-on-ubuntu-20.04/</guid><description>Compile qemu on Ubuntu 20.04 下载源码 git clone https://git.qemu.org/git/qemu.git cd qemu git submodule init git submodule update --recursive 编译安装 ./configure make 问题 # ERROR: glib-2.48 gthread-2.0 is required to compile QEMU $ sudo apt install -y libglib2.0-dev # ERROR: pixman &amp;gt;= 0.21.8 not present. # Please install the pixman devel package. $ sudo apt install -y libpixman-1-dev</description></item><item><title>The Skills of VIM</title><link>https://bevisy.github.io/p/the-skills-of-vim/</link><pubDate>Fri, 24 Jul 2020 15:02:12 +0800</pubDate><guid>https://bevisy.github.io/p/the-skills-of-vim/</guid><description>VIM 使用技巧 查找 大小写敏感控制 # VIM 默认大小写敏感查找； # 大小写不敏感查找 ：/foo\c # 大小写敏感查找 ：/foo\C 查找光标当前单词 # normal 模式下，&amp;#34;*&amp;#34; 键查找当前单词 Vim 查找和替换 :{作用范围}s/{目标}/{替换}/{替换标志} # 当前行替换 ：s/vivian/sky/ 替换当前行第一个 vivian 为 sky ：s/vivian/sky/g 替换当前行所有 vivian 为 sky # 范围替换； n 为数字，若 n 为 .，表示从当前行开始到最后一行 ：n,$s/vivian/sky/ 替换第 n 行开始到最后一行中每一行的第一个 vivian 为 sky ：n,$s/vivian/sky/g 替换第 n 行开始到最后一行中每一行所有 vivian 为 sky ：2,12s/hello/world/ 2-12行,第一次出现替换 ：.,+2s/hello/world/ 当前行与接下来的2行，第一次出现替换 # 全行替换 ：%s/vivian/sky/（等同于 ：g/vivian/s//sky/） 替换每一行的第一个 vivian 为 sky ：%s/vivian/sky/g（等同于 ：g/vivian/s//sky/g） 替换每一行中所有 vivian 为 sky # 使用&amp;#34;#&amp;#34;作为分隔符，此时中间出现的 / 不会作为分隔符 ：s#vivian/#sky/# 替换当前行第一个 vivian/ 为 sky/ ：%s+/oradata/apras/+/user01/apras1+ （使用+ 来 替换 / ）： /oradata/apras/替换成/user01/apras1/ # 替换确认，添加参数c，提示是否替换 :%s/hello/world/gc 针对每一个匹配项，提示是否替换</description></item><item><title>Compile Linux Kernel on Ubuntu 20.04</title><link>https://bevisy.github.io/p/compile-linux-kernel-on-ubuntu-20.04/</link><pubDate>Fri, 24 Jul 2020 00:41:59 +0800</pubDate><guid>https://bevisy.github.io/p/compile-linux-kernel-on-ubuntu-20.04/</guid><description>Linux 内核编译(Ubuntu 环境) 下载内核代码 https://www.kernel.org/
安装依赖 sudo apt update sudo apt install -y \ gcc \ make \ libncurses5-dev \ openssl \ libssl-dev \ build-essential \ pkg-config \ libc6-dev \ bison \ flex \ libelf-dev 准备.config和自定义配置 cd {Download}/linux-5.4.32/ sudo cp /boot/config-{uname -r} .config sudo make menuconfig 编译内核 # 编译内核 sudo make sudo make modules_install 安装内核 sudo mv {Download}/linux-5.4.32 /usr/src/ cd /usr/src/linux-5.</description></item><item><title>Zsh-And-Oh My Zsh-Installation summary</title><link>https://bevisy.github.io/p/zsh-and-oh-my-zsh-installation-summary/</link><pubDate>Sat, 18 Jul 2020 12:14:33 +0800</pubDate><guid>https://bevisy.github.io/p/zsh-and-oh-my-zsh-installation-summary/</guid><description>zsh 安装总结 安装zsh # Ubuntu 18.04 sudo apt update sudo apt install zsh -y 安装 Oh My Zsh # https://ohmyz.sh/#install sh -c &amp;#34;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&amp;#34; 插件安装 # 使用 Oh My Zsh 安装插件；默认安装目录为 $ZSH_CUSTOM/plugins (by default ~/.oh-my-zsh/custom/plugins) git clone https://github.com/zsh-users/zsh-autosuggestions.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting # 配置 .zshrc，添加插件列表 plugins=(zsh-autosuggestions zsh-syntax-highlighting) # 启动新终端，查看效果示例 zsh</description></item><item><title>通过nginx为netdata提供https访问</title><link>https://bevisy.github.io/p/%E9%80%9A%E8%BF%87nginx%E4%B8%BAnetdata%E6%8F%90%E4%BE%9Bhttps%E8%AE%BF%E9%97%AE/</link><pubDate>Tue, 21 Jan 2020 15:56:21 +0800</pubDate><guid>https://bevisy.github.io/p/%E9%80%9A%E8%BF%87nginx%E4%B8%BAnetdata%E6%8F%90%E4%BE%9Bhttps%E8%AE%BF%E9%97%AE/</guid><description>nginx 代理 netdata 并添加鉴权 netdata 安装 #!/bin/bash docker run -d --name=netdata \ -p 30002:19999 \ -v /etc/passwd:/host/etc/passwd:ro \ -v /etc/group:/host/etc/group:ro \ -v /proc:/host/proc:ro \ -v /sys:/host/sys:ro \ -v /var/run/docker.sock:/var/run/docker.sock:ro \ -e DO_NOT_TRACK=1 \ --cap-add SYS_PTRACE \ --security-opt apparmor=unconfined \ netdata/netdata nginx 安装 #!/usr/bin/env bash docker run -d \ --name nginx \ -v $(pwd)/html:/usr/share/nginx/html \ -v $(pwd)/conf.</description></item><item><title>通过Travis CI 部署静态页面到 github page</title><link>https://bevisy.github.io/p/%E9%80%9A%E8%BF%87travis-ci-%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2%E5%88%B0-github-page/</link><pubDate>Tue, 21 Jan 2020 00:25:33 +0800</pubDate><guid>https://bevisy.github.io/p/%E9%80%9A%E8%BF%87travis-ci-%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2%E5%88%B0-github-page/</guid><description>Travis CI 部署 Hexo 生成文件到 master 分支 文档主要实现Hexo利用 Travis CI 完成 github page 部署。
由于 username.github.io 仓库不允许切换 github page 分支，必须将 master 分支作为静态资源分支，所以新建 develop 分支作为开发分支。
详细的步骤参考将 Hexo 部署到 GitHub Pages，此处主要贴出区别的 Travis CI 配置文件：
sudo: false language: node_js node_js: - 13.6.0 cache: npm branches: only: - develop script: - hexo generate deploy: provider: pages skip-cleanup: true github-token: $GH_TOKEN keep-history: false target_branch: master local-dir: public on: branch: develop 上述配置信息解释参考 GitHub Pages Deployment。
参考文档 GitHub Pages Deployment</description></item></channel></rss>