<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linux on Bevisy's Blogs</title><link>https://bevisy.github.io/categories/linux/</link><description>Recent content in Linux on Bevisy's Blogs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 21 Jun 2022 23:14:52 +0800</lastBuildDate><atom:link href="https://bevisy.github.io/categories/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>Kata Containers 安全容器GPU支持实践</title><link>https://bevisy.github.io/p/kata-containers-%E5%AE%89%E5%85%A8%E5%AE%B9%E5%99%A8gpu%E6%94%AF%E6%8C%81%E5%AE%9E%E8%B7%B5/</link><pubDate>Tue, 21 Jun 2022 23:14:52 +0800</pubDate><guid>https://bevisy.github.io/p/kata-containers-%E5%AE%89%E5%85%A8%E5%AE%B9%E5%99%A8gpu%E6%94%AF%E6%8C%81%E5%AE%9E%E8%B7%B5/</guid><description>kata-containers 安全容器 GPU 支持实践 本文着重讲述如何在 kata-containers 安全容器中支持 GPU 设备，对安全容器本身的介绍会比较少，如果感兴趣的话，可以参考 kata-containers 官网。接下来，就是讲述如何一步步在安全容器中支持 GPU 设备，以Tesla P100 PCIe 16GB为例。
准备阶段 下载官方 release 包 下载官方代码，编译需要使用到的组件containerd-shim-kata-v2，kata-agent，虚拟机镜像 kata-containers.img或者kata-containers-initrd.img,虚拟机内核 vmlinuz GPU 支持实践 准备 release 包 可以从官方的 release 页面获取最新的包，此处使用当前最新版本2.4.2。
# 下载 wget https://github.com/kata-containers/kata-containers/releases/download/2.4.2/kata-static-2.4.2-x86_64.tar.xz # 解压并置于 /opt 目录下 tar xf kata-static-2.4.2-x86_64.tar.xz mv opt/kata /opt/ 编译必要组件 拉取 kata-containers 源码 注意：源码需要包含此PR
mkdir -p $GOPATH/src/github.com/kata-containers cd $GOPATH/src/github.com/kata-containers git clone https://github.com/kata-containers/kata-containers.git git clone https://github.com/kata-containers/tests.git # 如果当前用户不是 root 用户，则需要将 tests 仓库切换到 root 用户，否则后续编译镜像需要安装 libseccomp 会失败 sudo chown -R root:root tests 编译containerd-shim-kata-v2 # 编译 containerd-shim-v2 make -C $GOPATH/src/github.</description></item><item><title>Close Swap on Ubuntu20.04</title><link>https://bevisy.github.io/p/close-swap-on-ubuntu20.04/</link><pubDate>Tue, 25 May 2021 13:55:24 +0800</pubDate><guid>https://bevisy.github.io/p/close-swap-on-ubuntu20.04/</guid><description>临时关闭 sudo dphys-swapfile swapoff 永久关闭 sudo systemctl disable dphys-swapfile.service --now # 注释fstab #/dev/mapper/vgubuntu-swap_1 none swap sw 0 0</description></item><item><title>linux 利用loop设备模拟块设备</title><link>https://bevisy.github.io/p/linux-%E5%88%A9%E7%94%A8loop%E8%AE%BE%E5%A4%87%E6%A8%A1%E6%8B%9F%E5%9D%97%E8%AE%BE%E5%A4%87/</link><pubDate>Fri, 02 Apr 2021 16:37:51 +0800</pubDate><guid>https://bevisy.github.io/p/linux-%E5%88%A9%E7%94%A8loop%E8%AE%BE%E5%A4%87%E6%A8%A1%E6%8B%9F%E5%9D%97%E8%AE%BE%E5%A4%87/</guid><description>linux 利用loop设备模拟块设备 创建虚拟设备 losetup --help -a 显示所有已经使用的回环设备状态 -d 卸除回环设备 -f 寻找第一个未使用的回环设备 -e &amp;lt;加密选项&amp;gt; 启动加密编码 # 查找第一个未使用的回环设备 losetup -f # 创建文件 dd if=/dev/zero of=./disk.img bs=4M count=1024 # 将disk.img 虚拟成一个回环设备 losetup -f disk.img # 查询此设备 losetup -a | grep disk.img /dev/loop25: [64768]:3296700 (/home/zbb/temp/disk/disk.img) # 格式化设备 mkfs.ext4 /dev/loop25 # 挂载块设备 mount /dev/loop25 test # test 为自定义目录 # 卸载设备 umount test losetup -d /dev/loop25</description></item><item><title>Install Kubernetes1.20.1 and Containerd1.4.3 on Ubuntu with ZFS</title><link>https://bevisy.github.io/p/install-kubernetes1.20.1-and-containerd1.4.3-on-ubuntu-with-zfs/</link><pubDate>Mon, 11 Jan 2021 13:56:02 +0800</pubDate><guid>https://bevisy.github.io/p/install-kubernetes1.20.1-and-containerd1.4.3-on-ubuntu-with-zfs/</guid><description>基于ZFS的Ubuntu20.04安装kubernetes1.20 containerd 安装 containerd containerd.io 1.4.3 269548fa27e0089a8b8278fc4fc781d7f65a939b 安装 # 安装必要组件 $ sudo apt-get update $ sudo apt-get install \ apt-transport-https \ ca-certificates \ curl \ gnupg-agent \ software-properties-common # 安装gpg key curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - # 验证gpg key $ sudo apt-key fingerprint 0EBFCD88 # 添加 repo $ sudo add-apt-repository \ &amp;#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu \ $(lsb_release -cs)\ stable&amp;#34; # 安装containerd $ sudo apt-get update $ sudo apt-get install containerd.</description></item><item><title>The Skills of VIM</title><link>https://bevisy.github.io/p/the-skills-of-vim/</link><pubDate>Fri, 24 Jul 2020 15:02:12 +0800</pubDate><guid>https://bevisy.github.io/p/the-skills-of-vim/</guid><description>VIM 使用技巧 查找 大小写敏感控制 # VIM 默认大小写敏感查找； # 大小写不敏感查找 ：/foo\c # 大小写敏感查找 ：/foo\C 查找光标当前单词 # normal 模式下，&amp;#34;*&amp;#34; 键查找当前单词 Vim 查找和替换 :{作用范围}s/{目标}/{替换}/{替换标志} # 当前行替换 ：s/vivian/sky/ 替换当前行第一个 vivian 为 sky ：s/vivian/sky/g 替换当前行所有 vivian 为 sky # 范围替换； n 为数字，若 n 为 .，表示从当前行开始到最后一行 ：n,$s/vivian/sky/ 替换第 n 行开始到最后一行中每一行的第一个 vivian 为 sky ：n,$s/vivian/sky/g 替换第 n 行开始到最后一行中每一行所有 vivian 为 sky ：2,12s/hello/world/ 2-12行,第一次出现替换 ：.,+2s/hello/world/ 当前行与接下来的2行，第一次出现替换 # 全行替换 ：%s/vivian/sky/（等同于 ：g/vivian/s//sky/） 替换每一行的第一个 vivian 为 sky ：%s/vivian/sky/g（等同于 ：g/vivian/s//sky/g） 替换每一行中所有 vivian 为 sky # 使用&amp;#34;#&amp;#34;作为分隔符，此时中间出现的 / 不会作为分隔符 ：s#vivian/#sky/# 替换当前行第一个 vivian/ 为 sky/ ：%s+/oradata/apras/+/user01/apras1+ （使用+ 来 替换 / ）： /oradata/apras/替换成/user01/apras1/ # 替换确认，添加参数c，提示是否替换 :%s/hello/world/gc 针对每一个匹配项，提示是否替换</description></item><item><title>Compile Linux Kernel on Ubuntu 20.04</title><link>https://bevisy.github.io/p/compile-linux-kernel-on-ubuntu-20.04/</link><pubDate>Fri, 24 Jul 2020 00:41:59 +0800</pubDate><guid>https://bevisy.github.io/p/compile-linux-kernel-on-ubuntu-20.04/</guid><description>Linux 内核编译(Ubuntu 环境) 下载内核代码 https://www.kernel.org/
安装依赖 sudo apt update sudo apt install -y \ gcc \ make \ libncurses5-dev \ openssl \ libssl-dev \ build-essential \ pkg-config \ libc6-dev \ bison \ flex \ libelf-dev 准备.config和自定义配置 cd {Download}/linux-5.4.32/ sudo cp /boot/config-{uname -r} .config sudo make menuconfig 编译内核 # 编译内核 sudo make sudo make modules_install 安装内核 sudo mv {Download}/linux-5.4.32 /usr/src/ cd /usr/src/linux-5.</description></item><item><title>Zsh-And-Oh My Zsh-Installation summary</title><link>https://bevisy.github.io/p/zsh-and-oh-my-zsh-installation-summary/</link><pubDate>Sat, 18 Jul 2020 12:14:33 +0800</pubDate><guid>https://bevisy.github.io/p/zsh-and-oh-my-zsh-installation-summary/</guid><description>zsh 安装总结 安装zsh # Ubuntu 18.04 sudo apt update sudo apt install zsh -y 安装 Oh My Zsh # https://ohmyz.sh/#install sh -c &amp;#34;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&amp;#34; 插件安装 # 使用 Oh My Zsh 安装插件；默认安装目录为 $ZSH_CUSTOM/plugins (by default ~/.oh-my-zsh/custom/plugins) git clone https://github.com/zsh-users/zsh-autosuggestions.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting # 配置 .zshrc，添加插件列表 plugins=(zsh-autosuggestions zsh-syntax-highlighting) # 启动新终端，查看效果示例 zsh</description></item></channel></rss>